//  ********************************************************************
//  This file is part of KAT - the K-mer Analysis Toolkit.
//
//  KAT is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  KAT is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with KAT.  If not, see <http://www.gnu.org/licenses/>.
//  *******************************************************************

#pragma once

#include <getopt.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>

#include <common_args.hpp>
#include <str_utils.hpp>


namespace portculis
{

    const string    DEFAULT_OUTPUT_PREFIX   = "output";
    const uint16_t  DEFAULT_THREADS         = 1;

    const uint16_t  MIN_ARGS = 1;

    class PortculisArgs : public BaseArgs
    {
    private:
        string  mode_arg;
        int     mode_argc;
        char**  mode_argv;

    protected:

        // ***********************************************
        // These methods override BaseArgs virtual methods

        const string usage() const               { return "Usage: portculis [options] <bam_file>"; }
        const string shortDescription() const    { return "Portculis is used to..."; }
        const string longDescription() const
        {
            return  "";
        }

        const string optionsDescription() const
        {
            ostringstream help_str;

            help_str << " -o, --output_prefix=string  Path prefix for files generated by this program (\"" << DEFAULT_OUTPUT_PREFIX << "\")." << endl
                     << " -t, --threads=uint16        The number of threads to use (" << DEFAULT_THREADS << ")." << endl
                     << " -V, --version               Portculis Version"; }

        vector<option>* longOptions()
        {
            static struct option long_options_array[] =
            {
                {"output_prefix",   required_argument, 0, 'o'},
                {"threads",         required_argument, 0, 't'},
                {"version",         no_argument,       0, 'V'}
            };


            vector<option>* long_options = new vector<option>();

            for(uint8_t i = 0; i < 2; i++)
            {
                long_options->push_back(long_options_array[i]);
            }


            return long_options;
        }

        string shortOptions()
        {
            return "o:t:V";
        }

        void setOption(int c, string& option_arg)
        {
            switch (c)
            {
            case 'o':
                output_prefix = string(option_arg);
                break;
            case 't':
                threads = strToInt16(option_arg);
                break;
            case 'V':
                printVersion();
                exit(0);
            }
        }

        void processRemainingArgs(const vector<string>& remaining_args)
        {
            bam_file = remaining_args[0];
        }

        const string currentStatus() const
        {
            ostringstream status;

            status << "BAM file: " << bam_file << endl
                   << "Output prefix: " << output_prefix << endl
                   << "Threads requested: " << threads << endl;

            return status.str().c_str();
        }

    public:

        string      bam_file;
        string      output_prefix;
        uint16_t    threads;

        // Default constructor
        PortculisArgs() : BaseArgs(MIN_ARGS),
            output_prefix(DEFAULT_OUTPUT_PREFIX),
            threads(DEFAULT_THREADS)
        {}

        // Constructor that parses command line options
        PortculisArgs(int argc, char* argv[]) : BaseArgs(MIN_ARGS),
            output_prefix(DEFAULT_OUTPUT_PREFIX),
            threads(DEFAULT_THREADS)

        {
            parse(argc, argv);
        }


        void printVersion(std::ostream &os = std::cout) const
        {
    #ifndef PACKAGE_NAME
    #define PACKAGE_NAME "Portculis"
    #endif

    #ifndef PACKAGE_VERSION
    #define PACKAGE_VERSION "0.1.1"
    #endif
            os << PACKAGE_NAME << " V" << PACKAGE_VERSION << "\n";
        }
    };
}
